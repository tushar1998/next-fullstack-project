// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model users {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String?   @db.String
  email             String    @unique
  image             String?
  user_id           String?
  created_at        DateTime  @default(now()) @db.Timestamp
  updated_at        DateTime  @default(now()) @db.Timestamp
  deleted           Boolean   @default(false)
  deleted_at        DateTime? @db.Timestamp
  provider          String    @default("credentials")
  password          String?
  password_hash_key String?

  Organizations organizations[]
  OrgUsers      orgUsers[]
  invites       invites[]

  @@index([name])
  @@map("users")
}

model organizations {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String    @unique @db.String
  display_name String?   @db.String
  user_id      String    @db.ObjectId
  created_at   DateTime  @default(now()) @db.Timestamp
  updated_at   DateTime  @default(now()) @db.Timestamp
  deleted      Boolean   @default(false)
  deleted_at   DateTime? @db.Timestamp

  user         users          @relation(fields: [user_id], references: [id])
  OrgUsers     orgUsers[]
  invites      invites[]
  subscription subscription[]

  @@unique([name, deleted_at])
  @@map("organizations")
}

model roles {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String    @unique
  display_name      String    @db.String
  singleton         Boolean   @default(false)
  perform_action_on String[]
  created_at        DateTime  @default(now()) @db.Timestamp
  updated_at        DateTime  @default(now()) @db.Timestamp
  deleted           Boolean   @default(false)
  deleted_at        DateTime? @db.Timestamp

  orgUsers        orgUsers[]
  invites         invites[]
  rolePermissions rolePermissions[]

  @@unique([name, deleted_at])
  @@map("roles")
}

model permissions {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String            @unique
  display_name    String
  scope           String
  created_at      DateTime          @default(now()) @db.Timestamp
  updated_at      DateTime          @default(now()) @db.Timestamp
  deleted         Boolean           @default(false)
  deleted_at      DateTime?         @db.Timestamp
  rolePermissions rolePermissions[]

  @@unique([name, scope, deleted_at])
  @@index([display_name])
  @@map("permissions")
}

model orgUsers {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  user_id    String    @db.ObjectId
  org_id     String    @db.ObjectId
  role_id    String    @db.ObjectId
  created_at DateTime  @default(now()) @db.Timestamp
  updated_at DateTime  @default(now()) @db.Timestamp
  deleted    Boolean   @default(false)
  deleted_at DateTime? @db.Timestamp

  org  organizations @relation(fields: [org_id], references: [id])
  user users         @relation(fields: [user_id], references: [id])
  role roles         @relation(fields: [role_id], references: [id])

  @@unique([user_id, org_id, role_id, deleted_at])
  @@map("org_users")
}

model invites {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  org_id     String    @db.ObjectId
  role_id    String    @db.ObjectId
  email      String    @db.String
  expires_at DateTime  @db.Timestamp
  invited_by String    @db.ObjectId
  created_at DateTime  @default(now()) @db.Timestamp
  updated_at DateTime  @default(now()) @db.Timestamp
  deleted    Boolean   @default(false)
  deleted_at DateTime? @db.Timestamp

  user users         @relation(fields: [invited_by], references: [id])
  org  organizations @relation(fields: [org_id], references: [id])
  role roles         @relation(fields: [role_id], references: [id])

  @@unique([org_id, email, deleted_at])
  @@index([email, deleted_at])
  @@map("invites")
}

model rolePermissions {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  role_id       String    @db.ObjectId
  permission_id String    @db.ObjectId
  created_at    DateTime  @default(now()) @db.Timestamp
  updated_at    DateTime  @default(now()) @db.Timestamp
  deleted       Boolean   @default(false)
  deleted_at    DateTime? @db.Timestamp

  role        roles       @relation(fields: [role_id], references: [id])
  permissions permissions @relation(fields: [permission_id], references: [id])

  @@unique([role_id, permission_id])
  @@map("role_permissions")
}

model register {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String?   @db.String
  email             String    @unique
  user_id           String?
  password          String
  password_hash_key String
  email_verified    Boolean   @default(false)
  created_at        DateTime  @default(now()) @db.Timestamp
  updated_at        DateTime  @default(now()) @db.Timestamp
  deleted           Boolean   @default(false)
  deleted_at        DateTime? @db.Timestamp

  @@unique([email, deleted_at])
  @@map("register")
}

model subscription {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  org_id          String    @unique @db.ObjectId
  subscription_id String?   @unique
  customer_id     String?   @unique
  price_id        String?
  period_end      DateTime?

  created_at DateTime  @default(now()) @db.Timestamp
  updated_at DateTime  @default(now()) @db.Timestamp
  deleted    Boolean   @default(false)
  deleted_at DateTime? @db.Timestamp

  org organizations @relation(fields: [org_id], references: [id])

  @@unique([org_id, subscription_id, deleted_at])
}
